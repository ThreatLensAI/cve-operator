/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	kbatch "k8s.io/api/batch/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// GithubReleaseAsset defines the asset of the GithubRelease
type GithubReleaseAsset struct {

	// ID of the Asset
	// +kubebuilder:validation:Type=integer
	// +required
	ID *int64 `json:"id,omitempty"`

	// URL of the Asset
	// +kubebuilder:validation:Type=string
	// +required
	URL string `json:"url,omitempty"`

	// Browser Download URL of the Asset
	// +kubebuilder:validation:Type=string
	// +required
	BrowserDownloadURL string `json:"browserDownloadUrl,omitempty"`

	// Name of the Asset
	// +kubebuilder:validation:Type=string
	// +required
	Name string `json:"name,omitempty"`

	// Created At of the Asset
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	// Updated At of the Asset
	UpdatedAt *metav1.Time `json:"updatedAt,omitempty"`
}

// GitHubReleaseSpec defines the desired state of GitHubRelease
type GitHubReleaseSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Unique Identifier of the Release
	// +required
	ID *int64 `json:"id,omitempty"`

	// Name of the Release
	// +required
	Name string `json:"name"`

	// Tag Name of the Release
	// +required
	TagName string `json:"tagName"`

	// URL of the Release
	URL string `json:"url"`

	// Created At of the Release
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	// Published At of the Release
	PublishedAt *metav1.Time `json:"publishedAt,omitempty"`

	// Assets of the Release
	// +required
	Assets []*GithubReleaseAsset `json:"assets,omitempty"`

	// Custom Job Template Spec to be executed on each release for GithubRelease CRD
	// - PodSpec `RestartPolicy` is always overridden to "OnFailure" to ensure the Job is re-executed on failure
	// - Github Release variables are injected to all the containers in the job
	//		- GITHUB_RELEASE_TAG	(Correlates to github release tag)
	//		- GITHUB_RELEASE_NAME	(Correlates to github release name)
	//		- CVE_LIST_URL			(Correlates to Browser download URL of the delta file)
	// +kubebuilder:validation:Required
	JobTemplate *kbatch.JobTemplateSpec `json:"jobTemplate,omitempty"`
}

// GitHubReleaseStatus defines the observed state of GitHubRelease
type GitHubReleaseStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Status of Job created for the Release
	JobStatus *kbatch.JobStatus `json:"jobStatus,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GitHubRelease is the Schema for the githubreleases API
type GitHubRelease struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleaseSpec   `json:"spec,omitempty"`
	Status GitHubReleaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubReleaseList contains a list of GitHubRelease
type GitHubReleaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubRelease `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubRelease{}, &GitHubReleaseList{})
}
