/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"strings"

	githubv1 "github.com/csye7125-su24-team06/cve-operator/api/v1"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"

	ctrl "sigs.k8s.io/controller-runtime"

	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

// GitHubReleaseReconciler reconciles a GitHubRelease object
type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

var (
	githubReleaseFinalizer = githubv1.GroupVersion.String() + ".githubrelease/finalizer"
)

// +kubebuilder:rbac:groups=github.csye7125-su24-team06,resources=githubreleases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=github.csye7125-su24-team06,resources=githubreleases/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=github.csye7125-su24-team06,resources=githubreleases/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the GitHubRelease object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.18.4/pkg/reconcile
func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// Fetch the GitHubRelease instance
	var githubRelease githubv1.GitHubRelease
	if err := r.Get(ctx, req.NamespacedName, &githubRelease); err != nil {
		log.Error(err, "Unable to fetch GithubRelease. Ignoring if the object is deleted...")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Fetch Job details created by the GitHubRelease
	var job batchv1.Job
	var jobName = req.Name + "-job"

	err := r.Get(ctx, client.ObjectKey{Namespace: req.Namespace, Name: jobName}, &job)

	// Error fetching the job. Ignoring in case it doesn't exist
	if err != nil && !errors.IsNotFound(err) {
		log.Error(err, "unable to fetch job for githubrelease")
		return ctrl.Result{}, err
	}

	// NOTE: Current execution path implies job doesn't exist
	
	// Handle deletion of the GitHubRelease
	isDeletion := githubRelease.GetDeletionTimestamp() != nil
	if isDeletion {
		err := r.handleDeletion(ctx, &githubRelease, &job)
		return ctrl.Result{}, err
	}

	// Create a Job for the GitHubRelease if it doesn't exist
	if errors.IsNotFound(err) {
		err := r.createJob(ctx, jobName, &githubRelease)
		return ctrl.Result{}, err
	}

	// Check if the Job is finished
	done, jobType := isJobFinished(&job)
	if done {
		log.Info("Job is finished", "job", job.Name, "type", jobType)
	} else {
		log.Info("Job is still running", "job", job.Name)
	}

	// Update the status of the GitHubRelease
	githubRelease.Status = githubv1.GitHubReleaseStatus{
		JobStatus: &job.Status,
	}
	err = r.Status().Update(ctx, &githubRelease)
	if err != nil {
		log.Error(err, "Failed to update GithubRelease status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}


func (r *GitHubReleaseReconciler) handleDeletion(ctx context.Context, githubRelease *githubv1.GitHubRelease, job *batchv1.Job) error {
	log := log.FromContext(ctx)

	if controllerutil.ContainsFinalizer(githubRelease, githubReleaseFinalizer) {
		if job != nil {
			log.Info("Deleting job created by the GitHubRelease", "job", job.Name)
			if err := r.Delete(ctx, job); err != nil {
				log.Error(err, "unable to delete Job for githubrelease")
				return err
			}
		}

		log.Info("Removing finalizers and deleting", "name", githubRelease.Name)
		controllerutil.RemoveFinalizer(githubRelease, githubReleaseFinalizer)
		if err := r.Update(ctx, githubRelease); err != nil {
			return err
		}
	}

	return nil
}

func (r *GitHubReleaseReconciler) createJob(ctx context.Context, jobName string, githubRelease *githubv1.GitHubRelease) error {
	log := log.FromContext(ctx)

	// Build a Job from the JobTemplateSpec in the GitHubRelease
	job, err := r.buildJobForRelease(jobName, githubRelease)
	if err != nil {
		log.Error(err, "unable to build job for githubrelease")
		return err
	}

	// Create the Job in the cluster
	if err := r.Create(ctx, job); err != nil {
		log.Error(err, "unable to create Job for githubrelease")
		return err
	}

	log.Info("created Job for githubrelease", "job", job)

	// Update the status of the GitHubRelease
	githubRelease.Status = githubv1.GitHubReleaseStatus{
		JobStatus: &job.Status,
	}
	err = r.Status().Update(ctx, githubRelease)
	if err != nil {
		log.Error(err, "Failed to update GithubRelease status")
		return err
	}
	return nil
}

// buildJobForRelease builds a Job struct from JobTemplateSpec in the GitHubRelease
func (r *GitHubReleaseReconciler) buildJobForRelease(jobName string, gr *githubv1.GitHubRelease) (*batchv1.Job, error) {

	// Create a Job from the JobTemplateSpec in the GitHubRelease
	jobSpec := gr.Spec.JobTemplate.Spec.DeepCopy()

	// Inject the custom environment variables into the Pods
	injectEnvVarsToPods(&jobSpec.Template.Spec, gr)

	// Override the RestartPolicy to "OnFailure"
	jobSpec.Template.Spec.RestartPolicy = corev1.RestartPolicyOnFailure

	// Create the Job
	job := &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Labels:      make(map[string]string),
			Annotations: make(map[string]string),
			Name:        jobName,
			Namespace:   gr.Namespace,
		},
		Spec: *jobSpec,
	}

	if err := ctrl.SetControllerReference(gr, job, r.Scheme); err != nil {
		return nil, err
	}

	return job, nil
}

// Injects the custom github release environment variables into the Pods
func injectEnvVarsToPods(podSpec *corev1.PodSpec, gr *githubv1.GitHubRelease) {

	// Find the URL of the delta file
	downloadUrl := ""
	for _, asset := range gr.Spec.Assets {
		if strings.Contains(asset.Name, "_delta_") {
			downloadUrl = asset.BrowserDownloadURL
			break
		}
	}

	// Create the environment variables
	envVars := []corev1.EnvVar{
		{Name: "GITHUB_RELEASE_TAG", Value: gr.Spec.TagName},
		{Name: "GITHUB_RELEASE_NAME", Value: gr.Spec.Name},
		{Name: "CVE_LIST_URL", Value: downloadUrl},
	}

	// Inject the environment variables into the Containers
	for i := range podSpec.Containers {
		podSpec.Containers[i].Env = append(podSpec.Containers[i].Env, envVars...)
	}

	// Inject the environment variables into the InitContainers
	for i := range podSpec.InitContainers {
		podSpec.InitContainers[i].Env = append(podSpec.InitContainers[i].Env, envVars...)
	}
}

func isJobFinished(job *batchv1.Job) (bool, batchv1.JobConditionType) {
	for _, c := range job.Status.Conditions {
		if (c.Type == batchv1.JobComplete || c.Type == batchv1.JobFailed) && c.Status == corev1.ConditionTrue {
			return true, c.Type
		}
	}
	return false, ""
}

var (
	jobOwnerKey = ".metadata.controller"
	apiGVStr    = githubv1.GroupVersion.String()
)

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {

	if err := mgr.GetFieldIndexer().IndexField(context.Background(), &batchv1.Job{}, jobOwnerKey, func(rawObj client.Object) []string {
		// grab the job object, extract the owner...
		job := rawObj.(*batchv1.Job)
		owner := metav1.GetControllerOf(job)
		if owner == nil {
			return nil
		}
		if owner.APIVersion != apiGVStr || owner.Kind != "GitHubRelease" {
			return nil
		}

		return []string{owner.Name}
	}); err != nil {
		return err
	}

	return ctrl.NewControllerManagedBy(mgr).
		For(&githubv1.GitHubRelease{}).
		Owns(&batchv1.Job{}).
		Complete(r)
}
